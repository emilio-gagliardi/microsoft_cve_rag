{"node_id": "e59949b8-49a7-99e3-7040-4b09aa062127", "embedding": null, "excluded_embed_metadata_keys": ["id", "added_to_vector_store", "added_to_summary_index", "added_to_graph_store", "cve_fixes", "cve_mentions", "email_text_original", "unique_tokens", "tags"], "excluded_llm_metadata_keys": ["id", "added_to_vector_store", "added_to_summary_index", "added_to_graph_store", "cve_fixes", "cve_mentions", "email_text_original", "unique_tokens", "tags"], "text": "I find myself doing this a lot so I wrote a function to get installed program\ninformation. It works similarly to Matja\u017e's solution (via the registry) but\nreturns an array of objects that include all of the information from the ARP\nregistry. \nTo get all Acrobat installs you can use the following: Get-AddRemovePrograms\n-value \"*Acrobat*\" \nfunction Get-AddRemovePrograms\n{\n param([string]$value = \"*\",\n [string]$property=\"DisplayName\") \n$is64bitOS = (Get-WmiObject -Query \"select OSArchitecture from\nwin32_operatingsystem\").OSArchitecture -eq \"64-bit\"\n if($property -inotin @(\"UninstallKey\",\"UninstallArch\"))\n {\n $arpEntries = get-childitem -path\n\"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\",\"HKLM:\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\"\n-ErrorAction SilentlyContinue | where {$_.GetValue(\"$property\") -ilike \"$value\"} \n}\n elseif($property -ieq \"UninstallKey\")\n {\n $arpEntries = get-childitem -path\n\"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\",\"HKLM:\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\"\n-ErrorAction SilentlyContinue | where {$_.PSChildName -ilike \"$value\"}\n }\n elseif($property -ieq \"UninstallArch\")\n {\n if(($value -ieq \"x86\") -and ($is64bitOS))\n {\n $arpEntries = get-childitem -path\n\"HKLM:\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\"\n-ErrorAction SilentlyContinue\n }\n elseif((($value -ieq \"x86\") -and !($is64bitOS)) -or (($value -ieq \"x64\")\n-and $is64bitOS))\n {\n $arpEntries = get-childitem -path\n\"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\" -ErrorAction\nSilentlyContinue\n }\n }\n $output = @()\n if($arpEntries -ne $null)\n {\n foreach($arpEntry in $arpEntries)\n {\n $arpArch = \"x86\"\n if(($arpEntry.Name -inotmatch \"wow6432node\") -and $is64bitOS)\n {\n $arpArch = \"x64\"\n }\n $arpDef = @{\"UninstallKey\" = $arpEntry.Name -replace \".*\\\\\",\"\"\n \"UninstallArch\" = $arpArch}\n foreach($prop in $arpEntry.Property)\n {\n $arpDef[$prop] = $arpEntry.getValue($prop)\n }\n $output += New-Object -TypeName psobject -Property $arpDef\n }\n }\n return @($output)\n}", "metadata": {"id": "e59949b8-49a7-99e3-7040-4b09aa062127", "receivedDateTime": "2023-11-29T17:40:32+00:00", "topic": "RE: Detecting whether PC has Acrobat or Reader", "subject": "Re: [patchmanagement] RE: Detecting whether PC has Acrobat or Reader", "published": "2023-11-29T00:00:00", "collection": "patch_management", "cve_fixes": "", "cve_mentions": null, "tags": "", "conversation_link": "//groups.google.com/d/msgid/patchmanagement/CALBBxbxELhz02dUmE3%2BtVPwY0XQS27dTyhnTW%3DCk9dgkTMWQYA%40mail.gmail.com", "email_text_original": "You don't often get email from jesses.ui.pm@gmail.com. Learn why this is\nimportant [https://aka.ms/LearnAboutSenderIdentification] \nI find myself doing this a lot so I wrote a function to get installed program\ninformation. It works similarly to Matja\u017e's solution (via the registry) but\nreturns an array of objects that include all of the information from the ARP\nregistry. \nTo get all Acrobat installs you can use the following:\u00a0Get-AddRemovePrograms\n-value \"*Acrobat*\" \nfunction Get-AddRemovePrograms\n{\n\u00a0 \u00a0 param([string]$value = \"*\",\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 [string]$property=\"DisplayName\") \n$is64bitOS = (Get-WmiObject -Query \"select OSArchitecture from\nwin32_operatingsystem\").OSArchitecture -eq \"64-bit\"\n\u00a0 \u00a0 if($property -inotin @(\"UninstallKey\",\"UninstallArch\"))\n\u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 $arpEntries = \u00a0get-childitem -path\n\"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\",\"HKLM:\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\"\n-ErrorAction SilentlyContinue | where {$_.GetValue(\"$property\") -ilike \"$value\"} \n}\n\u00a0 \u00a0 elseif($property -ieq \"UninstallKey\")\n\u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 $arpEntries = \u00a0get-childitem -path\n\"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\",\"HKLM:\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\"\n-ErrorAction SilentlyContinue \u00a0| where {$_.PSChildName -ilike \"$value\"}\n\u00a0 \u00a0 }\n\u00a0 \u00a0 elseif($property -ieq \"UninstallArch\")\n\u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 if(($value -ieq \"x86\") -and ($is64bitOS))\n\u00a0 \u00a0 \u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 $arpEntries = \u00a0get-childitem -path\n\"HKLM:\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\"\n-ErrorAction SilentlyContinue\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 \u00a0 \u00a0 elseif((($value -ieq \"x86\") -and !($is64bitOS)) -or (($value -ieq \"x64\")\n-and $is64bitOS))\n\u00a0 \u00a0 \u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 $arpEntries = \u00a0get-childitem -path\n\"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\" -ErrorAction\nSilentlyContinue\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 }\n\u00a0 \u00a0 $output = @()\n\u00a0 \u00a0 if($arpEntries -ne $null)\n\u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 foreach($arpEntry in $arpEntries)\n\u00a0 \u00a0 \u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 $arpArch = \"x86\"\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if(($arpEntry.Name -inotmatch \"wow6432node\") -and $is64bitOS)\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 $arpArch = \"x64\"\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 $arpDef = @{\"UninstallKey\" = $arpEntry.Name -replace \".*\\\\\",\"\"\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"UninstallArch\" = $arpArch}\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 foreach($prop in $arpEntry.Property)\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 $arpDef[$prop] = $arpEntry.getValue($prop)\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 $output += New-Object -TypeName psobject -Property $arpDef\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 }\n\u00a0 \u00a0 return @($output)\n} \nOn Wed, Nov 22, 2023 at 8:51\u202fAM Matjaz Pavel <matjaz.pavel@gmail.com\nLink: https://groups.google.com/d/msgid/patchmanagement/CALBBxbxELhz02dUmE3%2BtVPwY0XQS27dTyhnTW%3DCk9dgkTMWQYA%40mail.gmail.com \n", "evaluated_keywords": "['get instal program information', 'hklm :\\\\\\\\ software', 'select osarchitecture', 'erroraction silentlycontinue']", "evaluated_noun_chunks": "[\"a function\", \"installed program information\", \"Matja\u017e's solution\", \"the registry\"]", "post_type": "Solution provided", "unique_tokens": 110, "thread_id": "detecting_pc_acrobat_reader_b10ef3", "previous_id": "edb92902-4528-5e91-76fa-65d2f2ddb759", "next_id": "78f9ad66-9f80-145e-ddee-f2af30b24e8b", "etl_processing_status": {"document_processed": true, "entities_extracted": true, "graph_prepared": false, "vector_prepared": false, "last_processed_at": "2024-12-30T15:42:23.521983", "processing_version": "1.0"}, "noun_chunks": "[\"a function\", \"installed program information\", \"Matja\u017e's solution\", \"the registry\"]", "keywords": "['get instal program information', 'hklm :\\\\\\\\ software', 'select osarchitecture', 'erroraction silentlycontinue']", "node_label": "PatchManagementPost", "kb_ids": [], "cve_ids": "", "build_numbers": [], "product_mentions": [], "is_processed": false}, "added_at": "2024-12-30T15:44:31.830870", "last_updated": "2024-12-30T15:45:06.568651"}