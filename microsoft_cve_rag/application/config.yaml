PROJECT_PATH: "C:\\Users\\emili\\PycharmProjects\\microsoft_cve_rag"
EMBEDDING_CONFIG:
  use_vectordb_embedding: true
  embedding_provider: "fastembed"
  vector_db_embedding_model_name: "snowflake/snowflake-arctic-embed-l"
  vector_db_embedding_length: 1024
  fastembed_model_name: "snowflake/snowflake-arctic-embed-l"
  fastembed_embedding_length: 1024
  fastembed_context_window: 512
  ollama_embedding_model_name: "nomic-embed-text"
  ollama_embedding_length: 768
  ollama_embedding_context_window: 8192
VECTORDB_CONFIG:
  tier1_collection: "msrc_rag_vector_db_dev"
  tier2_collection: "msrc_rag_vector_db_staging"
  tier3_collection: "msrc_rag_vector_db_prod"
  distance_metric: "cosine"
GRAPHDB_CONFIG:
  tier1_collection: "msrc_rag_graph_db_dev"
  tier2_collection: "msrc_rag_graph_db_staging"
  tier3_collection: "msrc_rag_graph_db_prod"
  distance_metric: "cosine"
  constraints:
    - name: "unique_product"
      cypher: |
        CREATE CONSTRAINT unique_product IF NOT EXISTS
        FOR (p:Product)
        REQUIRE (p.product_name, p.product_architecture, p.product_version) IS UNIQUE
    - name: "unique_product_build_combination"
      cypher: |
        CREATE CONSTRAINT unique_product_build_combination IF NOT EXISTS
        FOR (pb:ProductBuild)
        REQUIRE (pb.product_name, pb.product_version, pb.product_architecture, pb.cve_id, pb.product_build_id) IS UNIQUE
    - name: "unique_kb_article_combination"
      cypher: |
        CREATE CONSTRAINT unique_kb_article_combination IF NOT EXISTS
        FOR (ka:KBArticle)
        REQUIRE (ka.node_id, ka.product_build_id) IS UNIQUE
    - name: "unique_update_id"
      cypher: |
        CREATE CONSTRAINT unique_update_id IF NOT EXISTS
        FOR (up:UpdatePackage)
        REQUIRE up.node_id IS UNIQUE
    - name: "unique_msrc_id"
      cypher: |
        CREATE CONSTRAINT unique_msrc_id IF NOT EXISTS
        FOR (msrc:MSRCPost)
        REQUIRE msrc.node_id IS UNIQUE
    - name: "unique_symptom_id"
      cypher: |
        CREATE CONSTRAINT unique_symptom_id IF NOT EXISTS
        FOR (sm:Symptom)
        REQUIRE sm.node_id IS UNIQUE
    - name: "unique_cause_id"
      cypher: |
        CREATE CONSTRAINT unique_cause_id IF NOT EXISTS
        FOR (cs:Cause)
        REQUIRE cs.node_id IS UNIQUE
    - name: "unique_fix_id"
      cypher: |
        CREATE CONSTRAINT unique_fix_id IF NOT EXISTS
        FOR (fx:Fix)
        REQUIRE fx.node_id IS UNIQUE
    - name: "unique_tool_id"
      cypher: |
        CREATE CONSTRAINT unique_tool_id IF NOT EXISTS
        FOR (tl:Tool)
        REQUIRE tl.node_id IS UNIQUE
    - name: "unique_faq_id"
      cypher: |
        CREATE CONSTRAINT unique_faq_id IF NOT EXISTS
        FOR (faq:FAQ)
        REQUIRE faq.node_id IS UNIQUE
    - name: "unique_patch_id"
      cypher: |
        CREATE CONSTRAINT unique_patch_id IF NOT EXISTS
        FOR (pm:PatchManagementPost)
        REQUIRE pm.node_id IS UNIQUE
  indexes:
    - name: "product_node_property_published"
      cypher: |
        CREATE INDEX product_node_property_published FOR (p:Product) ON (p.published)
    - name: "productbuild_node_property_published"
      cypher: |
        CREATE INDEX productbuild_node_property_published FOR (pb:ProductBuild) ON (pb.published)
    - name: "kb_node_property_published"
      cypher: |
        CREATE INDEX kb_node_property_published FOR (ka:KBArticle) ON (ka.published)
    - name: "updatepackage_node_property_published"
      cypher: |
        CREATE INDEX updatepackage_node_property_published FOR (up:UpdatePackage) ON (up.published)
    - name: "msrc_node_property_published"
      cypher: |
        CREATE INDEX msrc_node_property_published FOR (msrc:MSRCPost) ON (msrc.published)
    - name: "patch_node_property_published"
      cypher: |
        CREATE INDEX patch_node_property_published FOR (pp:PatchManagementPost) ON (pp.published)
    - name: "symptom_node_property_published"
      cypher: |
        CREATE INDEX symptom_node_property_published FOR (sm:Symptom) ON (sm.published)
    - name: "cause_node_property_published"
      cypher: |
        CREATE INDEX cause_node_property_published FOR (cs:Cause) ON (cs.published)
    - name: "fix_node_property_published"
      cypher: |
        CREATE INDEX fix_node_property_published FOR (fx:Fix) ON (fx.published)
    - name: "tool_node_property_published"
      cypher: |
        CREATE INDEX tool_node_property_published FOR (tl:Tool) ON (tl.published)
    - name: "faq_node_property_published"
      cypher: |
        CREATE INDEX faq_node_property_published FOR (faq:FAQ) ON (faq.published)
CHAT_CONFIG:
  chat_model_name: ""
  chat_model_context_window: ""

